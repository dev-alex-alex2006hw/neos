#!/usr/bin/perl
# Copyright Â© 2013 EDF SA
# Contact:
#       CCN - HPC <dsp-cspit-ccn-hpc@edf.fr>
#       1, Avenue du General de Gaulle
#       92140 Clamart
#
# Authors: Mehdi Dogguy <mehdi.dogguy@edf.fr>
#          Antonio Russo <antonio-externe.russo@edf.fr>
#
# This program is free software; you can redistribute in and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License for more details. On Calibre
# systems, the full text of the GNU General Public License can be
# found in `/usr/share/common-licenses/GPL'.

use strict;
use Getopt::Long;
use Sys::Hostname;
use Neos;

use Switch;

# Job parameters
my $job_partition = Neos::get_partition ();
my $constraint = Neos::get_constraint ();
my $hostlist = Neos::host_list ();
my $firstnode = Neos::first_node ();
my $resolution = Neos::get_vncres ();
my $scenario = "";
my $result = GetOptions ("resolution=s" => \$resolution,
                         "scenario=s"   => \$scenario,
                         "config=s"     => \&Neos::config_file_handler,
);


if (Neos::is_good_partition($job_partition)) {
    Neos::init ();
    my $password = "";
    # Generate a new password if being run in "BATCH" mode
    if ($ENV{'ENVIRONMENT'} eq "BATCH") {
        $password = Neos::gen_password ();
    }

    # Run Xvnc (with appropriate parameters)
    my $xvnc = sprintf(Neos::get_param('cmd'),
                       Neos::get_display (),
                       $resolution,
                       Neos::get_rfbport ()
                );
    my $cmd = sprintf("%s > %s 2>&1 &",
                      $xvnc,
                      Neos::get_param('x_logfile')
                );
    system ($cmd);
    

    # Launch graphical session 
    if ($firstnode eq hostname) {
        system (sprintf("DISPLAY=:%s %s >/dev/null 2>&1 &",
                        Neos::get_display (),
                        Neos::get_param('session_manager')
               ));
    }

    # Print information about the present job (Only in "BATCH" mode)
    if ($ENV{'ENVIRONMENT'} eq "BATCH") {
        Neos::print_job_infos ($password);
    }

    # Monitor status of the Xvnc process, and exit as soon as it is
    # killed or walltime is reached.
    my $x_pid = Neos::get_x_pid ();
    my $end_time = Neos::get_job_endtime ();
    my $now = `date +%s`;
    while ($end_time - 30 > $now) {
        if ($x_pid != "") {
            system("ps -p $x_pid >/dev/null");
            if ($? != 0) {
                print "Neos(error): Xvnc disappeared... exiting!\n";
                last;
            }
        }
        sleep(10);
    }

    # Be sure Xvnc is killed before exiting (in case walltime is reached
    # but Xvnc is still around).
    Neos::kill_x_vnc ();
}
